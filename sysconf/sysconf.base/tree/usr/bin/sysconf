#!/bin/bash
#
# SYSCONF tool - helper to manage sysconf repositories and get them live on an UNIX system
#
# Started on 2014-01 by JF Gigand <jf@geonef.fr>
#
# Initialize sysconf like this:
# # mkdir -p /sysconf/actual
# # echo sysconf.base >/sysconf/actual/deps
# # echo / >/sysconf/target
# # cd /sysconf
# # git clone https://github.com/geonef/sysconf.base.git
# # sysconf.base/tree/usr/bin/sysconf compile install update
#
# To remove installed symlinks:
#   find /usr/bin/ /etc/ -type l -lname '/sysconf/*' | xargs rm
#
# Detailed instructions at:
# https://github.com/geonef/sysconf.base/blob/master/doc/usage.md
#

nef_command_name=sysconf

######################################################################
## FUNCTIONS

show_usage()
{
    cat >&2 <<EOF
Usage: $0 [-options] <command> [-options] [command_args]

Where <command> is one of:

    compile
        (re)populates the general "compiled" directory with symlinks
        from CONFIG and its deps (CONFIG has precedence).
        If CONFIG is not provided, the actual root config is used.

    install
        Install the compiled directory content to target

    update
        Execute updates for given config and recursive deps

    add file_1 [file_2 [file_N]]
	Move given (real) files to CONFIG's tree and replace them with a symlink.
	This is a frequently used command as we move/"standardize" config/misc
	files from real location (like /etc) to a sysconf repository.

	Use the '-c' option to specify the sysconf profile to use
        (default to 'actual').

    cmd command [command_args]
	Execute given command in CONFIG's dir and recursive dep dirs.
	This is useful with Git, like: sysconf cmd git status

    list [pattern]
        List compiled symlinks, optionally filtering pattern through 'grep'.

Options are:
    -c CONFIG
        Use given configuration. Defaults to 'actual', which is usually a symlink
        to the root configuration initialized with the command 'init'.

        Most often used with the 'add' command. Exemple:
        # sysconf add -c sysconf.x /etc/some/file

Environment variables:
    SYSCONF_PATH       path of config dir, defaults to '/sysconf'

Typical conf repository include:

    /deps
        List of configs we depend on, one by line, comments not allowed.
        Just bare names, will be append to our repository path's basedir
        to form the path of dep repository.

    /setup.rc
        Script executed for installing/updating the conf on target dir.

More help on project website: https://github.com/geonef/sysconf.base
EOF
}

# Execute 'git', apt-get installing it if needed and make return error fatal
safe_git()
{
    which git >/dev/null || apt-get install git
    nef_log "$PWD > git $@"
    git $@ || nef_fatal "$0: git command failed (fatal)"
}

local_cp()
{
    (
        if [ "$verbose" = "1" ]; then
            cp -v $@
        else
            cp $@
        fi
    ) 2>&1 | nef_log_pipe
}

# Util: create $confpath if needed, fix attributes and 'cd' into it
chdir_confpath()
{
    # In case $confpath does not yet exist
    [ -d "$confpath" ] || {
	mkdir "$confpath" && nef_log "Created confpath: $confpath"
	target="/"
	echo $target >$confpath/target

	chgrp -R adm $confpath
	chmod -R ug+w $confpath
	find $confpath -type d -exec chmod g+s {} \;
	nef_log "Fixed recursive owner group and permissions on: $confpath"
    }

    cd $confpath
}

# Util: remove $confpath/compiled and mkdir again
reinit_compiled_dir()
{
    compiled=$confpath/compiled
    [ -d $compiled ] && rm -rf $compiled
    mkdir $compiled
}

# function usage: compile_conf CONFIG [REPOSITORY_BASE]
compile_conf()
{
    (
        # 'sysconf_compiled_confs' contains the names of the confs
        # that have been compiled already, to avoid some deps
        # to be processed multiple times
        sysconf_compiled_confs=()
        compile_conf_rec "$@"
        nef_log "Compilation done in: $confpath/compiled"
    )
}

# function usage: compile_conf_rec CONFIG [REPOSITORY_BASE]
compile_conf_rec()
{
    local config="$1"
    chdir_confpath

    for conf in "${sysconf_compiled_confs[@]}"; do
        [ "$config" = "$conf" ] && return
    done
    sysconf_compiled_confs=(${sysconf_compiled_confs[@]} $config)

    [ -d $config/tree ] && {
	nef_log "Merging: $confpath/$config/tree/*"
	local_cp -sr $confpath/$config/tree/* $confpath/compiled/
    } || {
	nef_log "Ignoring tree-less conf: $config"
    }
    for dep in `cat $config/deps`; do
	compile_conf_rec $dep
    done
}

# Used by commands "install" and "update"
install_compiled()
{
    nef_log "Installing files from: $confpath/compiled"
    local_cp -r $confpath/compiled/* / || nef_fatal "copy failed"
}

load_environment()
{
        sysconf_loaded_confs=()
        load_environment_for_conf_rec actual
}
load_environment_for_conf_rec()
{
    local config="$1"
    chdir_confpath

    for conf in "${sysconf_loaded_confs[@]}"; do
        [ "$config" = "$conf" ] && return
    done
    sysconf_loaded_confs=(${sysconf_loaded_confs[@]} $config)

    for dep in `cat $config/deps`; do
	load_environment_for_conf_rec $dep
    done

    cd $confpath/$config || nef_fatal "missing directory (or mispelled dep): $config"

    if [ -r environment.rc ]; then
	nef_log -v "Loading environment: $config"
        . environment.rc
    else
	nef_log -v "Environment not defined: $config"
    fi
}

update_system_from_conf()
{
    (
        # 'sysconf_updated_confs' contains the names of the confs
        # that have been compiled already, to avoid some deps
        # to be processed multiple times
        # (and protect against infinite loop)
        sysconf_updated_confs=()
        update_system_from_conf_rec "$@"
    )
}
update_system_from_conf_rec()
{
    local config="$1"
    chdir_confpath

    for conf in "${sysconf_updated_confs[@]}"; do
        [ "$config" = "$conf" ] && return
    done
    sysconf_updated_confs=(${sysconf_updated_confs[@]} $config)

    for dep in `cat $config/deps`; do
	update_system_from_conf_rec $dep
    done

    cd $confpath/$config || nef_fatal "missing directory (or mispelled dep): $config"

    [ -r install.sh ] && {
	nef_log "Executing updates for config: $config"
        nef_log "WARNING: OBSOLETE: install.sh should be renamed to setup.rc"
        (
            NEF_LOG_PREFIX="$nef_command_name: $config"
            . /usr/share/nef-common/shell-command || exit 2
            . install.sh 2>&1 | nef_log_pipe
        )
    }
    [ -r setup.rc ] && {
	nef_log "Setting-up profile: $config"
        (
            NEF_LOG_PREFIX="$nef_command_name: $config"
            . /usr/share/nef-common/shell-command || exit 2
            . setup.rc 2>&1 | nef_log_pipe
        )
    }
}

# function usage: add_file CONFIG FILE_PATH
add_file()
{
    local config="$1"
    local file="$2"
    local target="$confpath/$config/tree$file"

    [ -f "$file" ] || nef_fatal "warning: arg is not a regular file: $file"
    [ -r "$target" ] && nef_fatal "warning: repository path already exists: $target"

    dir=$(dirname "$target")
    mkdir -p "$dir" && mv "$file" "$target" && ln -s "$target" "$file" && {
	ls -l "$file"
        nef_log
        nef_log "Undo command:"
        nef_log "  mv $target $file"
    } || {
	nef_log "warning: error moving '$file' to '$target' and replacing with symlink"
    }
}

# function usage: run_cmd CONFIG COMMAND [arg1 [... argn]]
run_cmd()
{
    local config="$1"
    shift
    local command="$1"
    shift
    chdir_confpath
    cd $config
    nef_log "*** In conf dir '$PWD' running: $command $@"
    "$command" "$@"

    for dep in `cat deps`; do
	run_cmd "$dep" "$command" "$@"
    done
}

sysconf_apt-get()
{
    options=""

    if test "$arg_yes" = 1; then
        # -o Dpkg::Options::='--force-confdef'
        options="$options --assume-yes"
    fi

    [ "$verbose" = "1" ] || options="$options --quiet"
    nef_log "Running: apt-get $options $@"
    apt-get $options $@
}

sysconf_require_packages()
{
    local _packages=

    for pkg in "$@"; do
        dpkg -l | grep -q " $pkg[: ]" || _packages="$_packages $pkg"
    done

    if [ -n "$_packages" ]; then
        export DEBIAN_FRONTEND=noninteractive
        # sysconf_apt-get install --yes --no-upgrade $_packages
        sysconf_apt-get install --yes -o Dpkg::Options::=--force-confdef --no-upgrade $_packages
    fi
}

######################################################################
# FROM sysconf.base library
# https://github.com/geonef/sysconf.base/blob/master/tree/usr/share/nef-common/shell-command

nef_log() {
    [ "x$NEF_LOG_FILE" = x ] && NEF_LOG_FILE="$LOG_FILE" # Legacy compat

    declare _opt_verbose=no
    declare _opt_debug=no
    declare _opt_prepend=""

    while [ "$1" != "" ]; do

        case "$1" in
            -p | --prepend) _opt_prepend="$2"; shift; shift ;;
            -v | --verbose) _opt_verbose=yes; shift ;;
            -d | --debug) _opt_debug=yes; shift ;;
            -*) nef_log "nef_log(): bad option: $1"; shift ;;
            *) break ;;
        esac

    done

    [ $_opt_verbose = yes -a x$nef_opt_show_verbose = xno ] && return 0
    [ $_opt_debug = yes -a x$nef_opt_show_debug = xno ] && return 0

    local txt="$*"
    local line="$*"
    local prefix="$NEF_LOG_PREFIX"
    [ -z "$prefix" ] && prefix="$nef_command_name"

    if [ "x$NEF_LOG_DATE" = xyes ]; then
        date="`date +'%Y-%m-%d %H:%M:%S:%N' | sed -E 's/.{6}$//'`"
        prefix="$prefix $date"
    fi

    line="$prefix: ${_opt_prepend}${line}"

    if [ "$NEF_LOG_FILE" = "" ]; then
        echo "$line" >&2
    else
        echo "$line" | tee -a $LOG_FILE >&2
    fi
}

nef_log_pipe() {
    local _opt_stdout=no

    while true; do
        case "$1" in
            --stdout) _opt_stdout=yes; shift ;;
            *) break ;;
        esac
    done

    while read; do
        nef_log "$@" "$REPLY"
        [ $_opt_stdout = yes ] && echo "$REPLY"
    done
    return 0
}

nef_fatal() {
    nef_log "FATAL ERROR: $*"
    exit 1;
}


######################################################################

self=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`
confpath="$SYSCONF_PATH"

if test "$confpath" = ""; then
    #confpath=`dirname "$self"`
    confpath=/sysconf
fi

export PATH=/sbin:/usr/sbin:$PATH
export LANGUAGE=C LC_ALL=C

# Options
config=actual
verbose=0
arg_yes=0


nef_read_args()
{
    OPTIND=1
    # message "command line is: $@"
    while getopts "vyc:" opt "$@"; do
        case $opt in
            c)
                # echo "-c was triggered, Parameter: $OPTARG" >&2
                config="$OPTARG"
                nef_log -v "Using config: $config [$confpath/$config]"
                ;;
            y)
                arg_yes=1
                ;;
            v)
                verbose=1
                ;;
            :)
                echo "Missing argument to option '$OPTARG'"
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                ;;
        esac
    done
    # echo "Setting OPTIND from $OPTIND to" $((OPTIND-1))
}

nef_read_args "$@"
shift $((OPTIND-1))

[ "$1" = "" ] && {
    echo "error: command missing"
    show_usage
    exit -1
}

while [ "$1" != "" ]; do
    command="$1"
    shift
    # nef_log -v "*** COMMAND: $command"

    case "$command" in

        compile)
            nef_read_args "$@"
            shift $((OPTIND-1))

	    reinit_compiled_dir
	    compile_conf "$config"
	    ;;

        install)
            nef_read_args "$@"
            shift $((OPTIND-1))

	    install_compiled
	    ;;

        update)
            nef_read_args "$@"
            shift $((OPTIND-1))

            load_environment
	    update_system_from_conf "$config"
	    ;;

        add)
            nef_read_args "$@"
            shift $((OPTIND-1))

	    while test "$1" != ""; do
	        add_file $config "$1"
	        shift
	    done
	    ;;

        cmd)
            nef_read_args "$@"
            shift $((OPTIND-1))

	    command="$1"
	    shift

	    run_cmd "$config" "$command" "$@"
            shift $#
	    ;;

        list)
            nef_read_args "$@"
            shift $((OPTIND-1))
            filter="$1"
            shift $#

            chdir_confpath
            command="find compiled/"
            if [ "x$filter" = "x" ]; then
                $command
            else
                $command | grep "$filter"
            fi
            ;;

        help)
	    show_usage
	    ;;

        *)
            nef_log "bad command: '$command'"
	    show_usage
	    exit -1
	    ;;
    esac

done

exit 0
